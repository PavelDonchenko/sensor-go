// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "email": "przmld033@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/group/{groupName}/species": {
            "get": {
                "description": "Retrieves the current detected fish species for a sensor group based on the provided group name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Get current detected fish species for a sensor group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the sensor group",
                        "name": "groupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ResponseDetectedFish"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/group/{groupName}/species/top/{top}": {
            "get": {
                "description": "Retrieves the current top detected fish species for a sensor group based on the provided group name and other optional parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Get current top detected fish species for a sensor group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the sensor group",
                        "name": "groupName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of top species to retrieve",
                        "name": "top",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date for the period (UNIX timestamp)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for the period (UNIX timestamp)",
                        "name": "till",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ResponseDetectedFish"
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/group/{groupName}/temperature/average": {
            "get": {
                "description": "Retrieves the temperature in Celsius for a sensor group based on the provided group name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Get temperature in Celsius for a sensor group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the sensor group",
                        "name": "groupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "temperature",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/group/{groupName}/transparency/average": {
            "get": {
                "description": "Retrieves the transparency percentage for a sensor group based on the provided group name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Get transparency percentage for a sensor group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the sensor group",
                        "name": "groupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "transparency",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/region/temperature/max": {
            "get": {
                "description": "Retrieves the current maximum temperature with optional parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "region"
                ],
                "summary": "Get current maximum temperature according to region.",
                "parameters": [
                    {
                        "type": "number",
                        "description": "minimum X coordinate",
                        "name": "xMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "maximum X coordinate",
                        "name": "xMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "maximum Y coordinate",
                        "name": "yMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "minimum Y coordinate",
                        "name": "yMix",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "minimum Z coordinate",
                        "name": "zMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "maximum Z coordinate",
                        "name": "zMax",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/region/temperature/min": {
            "get": {
                "description": "Retrieves the current minimum temperature with optional parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "region"
                ],
                "summary": "Get current minimum temperature according to region.",
                "parameters": [
                    {
                        "type": "number",
                        "description": "minimum X coordinate",
                        "name": "xMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "maximum X coordinate",
                        "name": "xMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "maximum Y coordinate",
                        "name": "yMax",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "minimum Y coordinate",
                        "name": "yMix",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "minimum Z coordinate",
                        "name": "zMin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "maximum Z coordinate",
                        "name": "zMax",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/sensor/{codename}/temperature/average": {
            "get": {
                "description": "Retrieves the average temperature based on the  optional parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "Get average temperature from sensor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the group and id inside the group",
                        "name": "codename",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date for the period (UNIX timestamp)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for the period (UNIX timestamp)",
                        "name": "till",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.ResponseDetectedFish": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "SENSOR API",
	Description:      "TEST API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
